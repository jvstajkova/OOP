#include<iostream>
#include<stdlib.h>
#include<cmath>
using namespace std;

const double PI = 3.14;

class Figure
{
public:
	virtual double area() const = 0;
	virtual double perimeter() const = 0;
};

class Circle :public Figure
{
protected:
	double radius;
public:
	Circle(double r)
	{
		radius = r;
	}
	double area() const
	{
		return PI*radius*radius;
	}
	double perimeter() const
	{
		return 2 * PI*radius;
	}
};

class Point
{

public: 
	double x;
	double y;
	Point()
	{
		x = 0;
		y = 0;
	}
	Point(double _x, double _y)
	{
		x = _x; 
		y = _y;
	}
	double distance(const Point& other) const
	{
		return sqrt((x - other.x)*(x - other.x) + (y - other.y)*(y - other.y));
	}
};

class ListOfPoints
{
protected:
	int size;
	Point* points;
	void copy(const ListOfPoints& other)
	{
		if (points != NULL)
			delete points;

		points = new Point[other.size];
		for (int i = 0; i < other.size; i++)
		{
			points[i].x = other.points[i].x;

			points[i].y = other.points[i].y;
		}
	}
public:
	ListOfPoints(int numberOfPoints)
	{
		size = numberOfPoints;
		points = new Point[size];
	}
	ListOfPoints(const ListOfPoints& other)
	{
		points = NULL;
		copy(other);
	}
	ListOfPoints& operator=(const ListOfPoints& other)
	{
		if (this != &other)
		{
			copy(other);
		}
		return *this;
	}
	~ListOfPoints()
	{
		delete points;
	}
	Point& operator[] (int i)
	{
		if (i < 0 || i >= size)
		{
			cout << "Error! Invalid index! " << endl;
		}
		return points[i];
	}
};

class Polygon :public Figure, public ListOfPoints
{
public:
	Polygon(int verteces) :ListOfPoints(verteces)
	{

	}
	double area() const
	{
		double s = 0;
		for (int i = 0; i < size - 1; i++)
			s += ((points[i].x - points[i+1].x)*(points[i].y + points[i + 1].y));
		if (size>1)
		{
			s += ((points[size - 1].x - points[0].x)* (points[size - 1].y - points[0].y));
			return fabs(s / 2);
		}
	}
	double perimeter() const
	{
		double p = 0;
		for (int i = 0; i < size - 1; i++)
			p +=points[i].distance(points[i + 1]);
		if (size>1)
			p += points[size - 1].distance(points[0]);
		return p;
	}
};

int main()
{
	Circle circle(1);
	Polygon rectangle(4);
	rectangle[0].x= 2;
	rectangle[0].y = 3;
	rectangle[1].x = 4;
	rectangle[1].y = 5;
	rectangle[2].x = 6;
	rectangle[2].y = 2;
	rectangle[3].x = 3;
	rectangle[3].y = 9;

	cout << circle.perimeter() << endl;
	cout << circle.area() << endl;
	cout << rectangle.perimeter() << endl;
	cout << rectangle.area() << endl;

	system("pause");
	return 0;
}

